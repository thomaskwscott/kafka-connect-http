package uk.co.threefi.connect.http.sink;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link RequestInfo} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractRequestInfoAssert<S extends AbstractRequestInfoAssert<S, A>, A extends RequestInfo> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractRequestInfoAssert}</code> to make assertions on actual RequestInfo.
   * @param actual the RequestInfo we want to make assertions on.
   */
  protected AbstractRequestInfoAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual RequestInfo's body is equal to the given one.
   * @param body the given body to compare the actual RequestInfo's body to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfo's body is not equal to the given one.
   */
  public S hasBody(String body) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting body of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualBody = actual.getBody();
    if (!Objects.areEqual(actualBody, body)) {
      failWithMessage(assertjErrorMessage, actual, body, actualBody);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's headers contains the given String elements.
   * @param headers the given elements that should be contained in actual RequestInfo's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers does not contain all given String elements.
   */
  public S hasHeaders(String... headers) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getHeaders(), headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's headers contains the given String elements in Collection.
   * @param headers the given elements that should be contained in actual RequestInfo's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers does not contain all given String elements.
   */
  public S hasHeaders(java.util.Collection<? extends String> headers) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (headers == null) {
      failWithMessage("Expecting headers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getHeaders(), headers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's headers contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param headers the given elements that should be contained in actual RequestInfo's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers does not contain all given String elements.
   */
  public S hasOnlyHeaders(String... headers) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getHeaders(), headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's headers contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param headers the given elements that should be contained in actual RequestInfo's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers does not contain all given String elements.
   */
  public S hasOnlyHeaders(java.util.Collection<? extends String> headers) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (headers == null) {
      failWithMessage("Expecting headers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getHeaders(), headers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's headers does not contain the given String elements.
   *
   * @param headers the given elements that should not be in actual RequestInfo's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers contains any given String elements.
   */
  public S doesNotHaveHeaders(String... headers) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (headers == null) failWithMessage("Expecting headers parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getHeaders(), headers);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's headers does not contain the given String elements in Collection.
   *
   * @param headers the given elements that should not be in actual RequestInfo's headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers contains any given String elements.
   */
  public S doesNotHaveHeaders(java.util.Collection<? extends String> headers) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (headers == null) {
      failWithMessage("Expecting headers parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getHeaders(), headers.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo has no headers.
   * @return this assertion object.
   * @throws AssertionError if the actual RequestInfo's headers is not empty.
   */
  public S hasNoHeaders() {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have headers but had :\n  <%s>";

    // check
    if (actual.getHeaders().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getHeaders());
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual RequestInfo's method is equal to the given one.
   * @param method the given method to compare the actual RequestInfo's method to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfo's method is not equal to the given one.
   */
  public S hasMethod(String method) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting method of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualMethod = actual.getMethod();
    if (!Objects.areEqual(actualMethod, method)) {
      failWithMessage(assertjErrorMessage, actual, method, actualMethod);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's timeStamp is equal to the given one.
   * @param timeStamp the given timeStamp to compare the actual RequestInfo's timeStamp to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfo's timeStamp is not equal to the given one.
   */
  public S hasTimeStamp(long timeStamp) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting timeStamp of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualTimeStamp = actual.getTimeStamp();
    if (actualTimeStamp != timeStamp) {
      failWithMessage(assertjErrorMessage, actual, timeStamp, actualTimeStamp);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual RequestInfo's url is equal to the given one.
   * @param url the given url to compare the actual RequestInfo's url to.
   * @return this assertion object.
   * @throws AssertionError - if the actual RequestInfo's url is not equal to the given one.
   */
  public S hasUrl(String url) {
    // check that actual RequestInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting url of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUrl = actual.getUrl();
    if (!Objects.areEqual(actualUrl, url)) {
      failWithMessage(assertjErrorMessage, actual, url, actualUrl);
    }

    // return the current assertion for method chaining
    return myself;
  }

}
